[
    {
        "question_id": 1,
        "code_file": "\n#include <iostream>\n#include <vector>\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::vector<int>> moves(N, std::vector<int>(3));\n    for (int i = 0; i < N; ++i) {\n        std::cin >> moves[i][0] >> moves[i][1] >> moves[i][2];\n    }\n\n    int max_score = 0;\n    for (int initial_position = 1; initial_position <= 3; ++initial_position) {\n        int score = 0;\n        int current_position = initial_position;\n        for (const auto& move : moves) {\n            if (current_position == move[0]) {\n                current_position = move[1];\n            } else if (current_position == move[1]) {\n                current_position = move[0];\n            }\n            if (current_position == move[2]) {\n                ++score;\n            }\n        }\n        max_score = std::max(max_score, score);\n    }\n\n    std::cout << max_score << std::endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 2,
        "code_file": "\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\nint main() {\n    int B, E, M;\n    std::cin >> B >> E >> M;\n\n    std::vector<int> cows = {B, E, M};\n    std::sort(cows.begin(), cows.end());\n\n    B = cows[0];\n    E = cows[1];\n    M = cows[2];\n\n    // \u6700\u5c0f\u79fb\u52a8\u6b21\u6570\n    int min_moves = 0;\n    if (B + 1 == E && E + 1 == M) {\n        min_moves = 0;\n    } else if (B + 1 == E || E + 1 == M) {\n        min_moves = 1;\n    } else {\n        min_moves = 2;\n    }\n\n    // \u6700\u5927\u79fb\u52a8\u6b21\u6570\n    int max_moves = std::max(M - E, E - B) - 1;\n\n    std::cout << min_moves << std::endl;\n    std::cout << max_moves << std::endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 3,
        "code_file": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    vector<vector<int>> graph(N + 1);\n    for (int i = 0; i < N - 1; ++i) {\n        int a, b;\n        cin >> a >> b;\n        graph[a].push_back(b);\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u52a0\u5de5\u7ad9i\uff0c\u4ece\u5176\u4ed6\u6bcf\u4e2a\u52a0\u5de5\u7ad9j\u51fa\u53d1\u90fd\u53ef\u4ee5\u5230\u8fbe\u52a0\u5de5\u7ad9i\n    for (int i = 1; i <= N; ++i) {\n        bool can_reach = true;\n        for (int j = 1; j <= N; ++j) {\n            if (i == j) continue;\n            bool can_j_reach_i = false;\n            vector<bool> visited(N + 1, false);\n            visited[j] = true;\n            vector<int> stack = {j};\n            while (!stack.empty()) {\n                int u = stack.back();\n                stack.pop_back();\n                for (int v : graph[u]) {\n                    if (!visited[v]) {\n                        visited[v] = true;\n                        stack.push_back(v);\n                        if (v == i) {\n                            can_j_reach_i = true;\n                            break;\n                        }\n                    }\n                }\n                if (can_j_reach_i) break;\n            }\n            if (!can_j_reach_i) {\n                can_reach = false;\n                break;\n            }\n        }\n        if (can_reach) {\n            cout << i << endl;\n            return 0;\n        }\n    }\n\n    cout << -1 << endl;\n    return 0;\n}\n"
    },
    {
        "question_id": 4,
        "code_file": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int N, M, K;\n    cin >> N >> M >> K;\n\n    vector<int> ranks(N + 1, 0); // \u7528\u4e8e\u5b58\u50a8\u6bcf\u5934\u5976\u725b\u7684\u793e\u4f1a\u5730\u4f4d\n    vector<pair<int, int>> constraints(K); // \u7528\u4e8e\u5b58\u50a8\u6bcf\u5934\u5976\u725b\u7684\u7279\u5b9a\u6324\u5976\u4f4d\u7f6e\u7684\u7ea6\u675f\n\n    for (int i = 0; i < M; ++i) {\n        int cow;\n        cin >> cow;\n        ranks[cow] = i + 1; // \u7ed9\u6bcf\u5934\u5976\u725b\u4e00\u4e2a\u793e\u4f1a\u5730\u4f4d\u6392\u540d\n    }\n\n    for (int i = 0; i < K; ++i) {\n        cin >> constraints[i].first >> constraints[i].second;\n    }\n\n    // \u6309\u7167\u793e\u4f1a\u5730\u4f4d\u6392\u540d\u5bf9\u5976\u725b\u8fdb\u884c\u6392\u5e8f\n    vector<int> cows(N);\n    for (int i = 1; i <= N; ++i) {\n        cows[i - 1] = i;\n    }\n    sort(cows.begin(), cows.end(), [&](int a, int b) {\n        return ranks[a] < ranks[b];\n    });\n\n    // \u68c0\u67e5\u6bcf\u5934\u5976\u725b\u7684\u7279\u5b9a\u6324\u5976\u4f4d\u7f6e\u7684\u7ea6\u675f\uff0c\u5982\u679c\u8fdd\u53cd\u4e86\u5219\u91cd\u65b0\u6392\u5e8f\n    for (const auto& constraint : constraints) {\n        int cow = constraint.first;\n        int pos = constraint.second;\n        auto it = find(cows.begin(), cows.end(), cow);\n        if (it != cows.end() && distance(cows.begin(), it) != pos - 1) {\n            // \u5c06\u5976\u725b\u79fb\u52a8\u5230\u6307\u5b9a\u4f4d\u7f6e\n            cows.erase(it);\n            cows.insert(cows.begin() + pos - 1, cow);\n        }\n    }\n\n    // \u627e\u5230\u5976\u725b1\u7684\u4f4d\u7f6e\n    int pos = find(cows.begin(), cows.end(), 1) - cows.begin() + 1;\n    cout << pos << endl;\n\n    return 0;\n}\n"
    }
]
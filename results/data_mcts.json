[
    {
        "question_id": 1,
        "code_file": "\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    vector<vector<int>> operations(N, vector<int>(3));\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < 3; ++j) {\n            cin >> operations[i][j];\n        }\n    }\n\n    vector<int> positions = {1, 2, 3};\n    int max_score = 0;\n\n    // Try all possible initial positions of the stone\n    for (int initial_pos = 1; initial_pos <= 3; ++initial_pos) {\n        int score = 0;\n        int current_pos = initial_pos;\n\n        // Simulate the game for each operation\n        for (const auto& op : operations) {\n            if (current_pos == op[0]) {\n                current_pos = op[1];\n            } else if (current_pos == op[1]) {\n                current_pos = op[0];\n            }\n            if (current_pos == op[2]) {\n                ++score;\n            }\n        }\n        max_score = max(max_score, score);\n    }\n\n    cout << max_score << endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 2,
        "code_file": "\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int a[3];\n    cin >> a[0] >> a[1] >> a[2];\n    sort(a, a+3);\n\n    // \u8ba1\u7b97\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\n    int min_moves = 0;\n    if (a[1] - a[0] == 2) {\n        min_moves = 1;\n    } else if (a[2] - a[1] == 2) {\n        min_moves = 1;\n    } else {\n        min_moves = 2;\n    }\n\n    // \u8ba1\u7b97\u6700\u5927\u79fb\u52a8\u6b21\u6570\n    int max_moves = max(a[2] - a[1], a[1] - a[0]) - 1;\n\n    cout << min_moves << endl;\n    cout << max_moves << endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 3,
        "code_file": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int N;\n    cin >> N;\n    vector<pair<int, int>> edges(N - 1);\n    for (int i = 0; i < N - 1; ++i) {\n        cin >> edges[i].first >> edges[i].second;\n    }\n\n    // \u6784\u5efa\u90bb\u63a5\u8868\n    vector<vector<int>> adj(N + 1);\n    for (const auto& edge : edges) {\n        adj[edge.first].push_back(edge.second);\n    }\n\n    // \u68c0\u67e5\u6bcf\u4e2a\u8282\u70b9\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n    for (int i = 1; i <= N; ++i) {\n        bool canReach = true;\n        for (int j = 1; j <= N; ++j) {\n            if (j == i) continue;\n            bool canReachJ = false;\n            vector<bool> visited(N + 1, false);\n            vector<int> stack;\n            stack.push_back(j);\n            while (!stack.empty()) {\n                int node = stack.back();\n                stack.pop_back();\n                if (node == i) {\n                    canReachJ = true;\n                    break;\n                }\n                if (visited[node]) continue;\n                visited[node] = true;\n                for (int neighbor : adj[node]) {\n                    if (!visited[neighbor]) {\n                        stack.push_back(neighbor);\n                    }\n                }\n            }\n            if (!canReachJ) {\n                canReach = false;\n                break;\n            }\n        }\n        if (canReach) {\n            cout << i << endl;\n            return 0;\n        }\n    }\n\n    cout << -1 << endl;\n    return 0;\n}\n"
    },
    {
        "question_id": 4,
        "code_file": "\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <map>\nusing namespace std;\n\nstruct Constraint {\n    int cow;\n    int position;\n};\n\nint main() {\n    int N, M, K;\n    cin >> N >> M >> K;\n\n    vector<int> socialHierarchy(N + 1, 0);\n    for (int i = 0; i < M; ++i) {\n        int cow;\n        cin >> cow;\n        socialHierarchy[cow] = i + 1;\n    }\n\n    vector<Constraint> specificPositions(K);\n    for (int i = 0; i < K; ++i) {\n        cin >> specificPositions[i].cow >> specificPositions[i].position;\n    }\n\n    // \u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u7ef4\u62a4\u793e\u4f1a\u9636\u5c42\u7684\u987a\u5e8f\n    priority_queue<int, vector<int>, greater<int>> pq(socialHierarchy.begin() + 1, socialHierarchy.begin() + N + 1);\n    \n    // \u4f7f\u7528 map \u6765\u7ef4\u62a4\u7279\u5b9a\u4f4d\u7f6e\u7684\u5976\u725b\n    map<int, int> positionMap;\n    for (const auto& constraint : specificPositions) {\n        positionMap[constraint.cow] = constraint.position;\n    }\n\n    // \u7528\u4e8e\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u5976\u725b\n    vector<int> positions(N + 1, 0);\n\n    // \u5206\u914d\u793e\u4f1a\u9636\u5c42\u987a\u5e8f\n    int currentPosition = 1;\n    while (!pq.empty()) {\n        int cow = pq.top();\n        pq.pop();\n        if (positionMap.find(cow) == positionMap.end()) {\n            positions[currentPosition] = cow;\n            currentPosition++;\n        }\n    }\n\n    // \u5206\u914d\u7279\u5b9a\u4f4d\u7f6e\u7684\u5976\u725b\n    for (const auto& constraint : specificPositions) {\n        int cow = constraint.cow;\n        int position = constraint.position;\n        if (positions[position] == 0) {\n            positions[position] = cow;\n        } else {\n            // \u627e\u5230\u4e00\u4e2a\u7a7a\u4f4d\n            while (positions[position] != 0) {\n                position++;\n            }\n            positions[position] = cow;\n        }\n    }\n\n    // \u627e\u5230\u5976\u725b1\u7684\u4f4d\u7f6e\n    int positionOfCow1 = 0;\n    for (int i = 1; i <= N; ++i) {\n        if (positions[i] == 1) {\n            positionOfCow1 = i;\n            break;\n        }\n    }\n\n    cout << positionOfCow1 << endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 5,
        "code_file": "\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 505;\nint n, m, t[MAXN], dp[MAXN][MAXN][MAXN], sum[MAXN];\n\nint main() {\n    // \u8bfb\u53d6\u8f93\u5165\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", &t[i]);\n    }\n\n    // \u5bf9\u65f6\u95f4\u8fdb\u884c\u6392\u5e8f\n    sort(t + 1, t + 1 + n);\n\n    // \u8ba1\u7b97\u524d\u7f00\u548c\n    for (int i = 1; i <= n; i++) {\n        sum[i] = sum[i - 1] + t[i];\n    }\n\n    // \u521d\u59cb\u5316dp\u6570\u7ec4\uff0c\u8bbe\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u503c\n    memset(dp, 0x3f, sizeof(dp));\n    dp[0][0][0] = 0;\n\n    // \u52a8\u6001\u89c4\u5212\u6c42\u89e3\n    for (int i = 1; i <= n; i++) {\n        for (int j = 0; j < i; j++) {\n            for (int k = 0; k <= i; k++) {\n                // \u4e0d\u4e0a\u8fd9\u8f86\u8f66\u7684\u60c5\u51b5\n                dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j][k]);\n\n                // \u4e0a\u8fd9\u8f86\u8f66\u7684\u60c5\u51b5\n                if (k > 0) {\n                    int last_time = j - (m - k);\n                    if (last_time >= t[i - k + 1]) {\n                        dp[i][j][k] = min(dp[i][j][k], dp[i - k][last_time][k] + sum[i] - sum[i - k]);\n                    }\n                }\n            }\n        }\n    }\n\n    // \u627e\u5230\u6700\u5c0f\u7684\u7b49\u5f85\u65f6\u95f4\n    int ans = INT_MAX;\n    for (int j = 0; j <= n; j++) {\n        for (int k = 0; k <= n; k++) {\n            ans = min(ans, dp[n][j][k]);\n        }\n    }\n\n    // \u8f93\u51fa\u7ed3\u679c\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n"
    },
    {
        "question_id": 6,
        "code_file": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <unordered_set>\n\nusing namespace std;\n\nint main() {\n    vector<vector<char>> board(3, vector<char>(3));\n    for (int i = 0; i < 3; ++i) {\n        for (int j = 0; j < 3; ++j) {\n            cin >> board[i][j];\n        }\n    }\n\n    unordered_set<char> single_wins;\n    unordered_set<string> pair_wins;\n\n    // Check rows\n    for (int i = 0; i < 3; ++i) {\n        set<char> row_set;\n        for (int j = 0; j < 3; ++j) {\n            row_set.insert(board[i][j]);\n        }\n        if (row_set.size() == 2) {\n            string pair = \"\";\n            for (char c : row_set) {\n                pair += c;\n            }\n            pair_wins.insert(pair);\n        } else if (row_set.size() == 1) {\n            single_wins.insert(*row_set.begin());\n        }\n    }\n\n    // Check columns\n    for (int j = 0; j < 3; ++j) {\n        set<char> col_set;\n        for (int i = 0; i < 3; ++i) {\n            col_set.insert(board[i][j]);\n        }\n        if (col_set.size() == 2) {\n            string pair = \"\";\n            for (char c : col_set) {\n                pair += c;\n            }\n            pair_wins.insert(pair);\n        } else if (col_set.size() == 1) {\n            single_wins.insert(*col_set.begin());\n        }\n    }\n\n    // Check diagonals\n    set<char> diag1_set = {board[0][0], board[1][1], board[2][2]};\n    set<char> diag2_set = {board[0][2], board[1][1], board[2][0]};\n    if (diag1_set.size() == 2) {\n        string pair = \"\";\n        for (char c : diag1_set) {\n            pair += c;\n        }\n        pair_wins.insert(pair);\n    } else if (diag1_set.size() == 1) {\n        single_wins.insert(*diag1_set.begin());\n    }\n    if (diag2_set.size() == 2) {\n        string pair = \"\";\n        for (char c : diag2_set) {\n            pair += c;\n        }\n        pair_wins.insert(pair);\n    } else if (diag2_set.size() == 1) {\n        single_wins.insert(*diag2_set.begin());\n    }\n\n    cout << single_wins.size() << endl;\n    cout << pair_wins.size() << endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 7,
        "code_file": "\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    // \u4ece2\u5f00\u59cb\uff0c\u9010\u4e2a\u68c0\u67e5\u662f\u5426\u80fd\u6574\u9664n\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) {\n            // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u56e0\u6570\uff0c\u90a3\u4e48\u8f83\u5927\u7684\u8d28\u6570\u5c31\u662fn\u9664\u4ee5\u8fd9\u4e2a\u56e0\u6570\n            cout << n / i << endl;\n            return 0;\n        }\n    }\n\n    // \u5982\u679c\u6ca1\u6709\u627e\u5230\u56e0\u6570\uff0c\u90a3\u4e48n\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u4e0d\u9700\u8981\u8f93\u51fa\n    return 0;\n}\n"
    },
    {
        "question_id": 8,
        "code_file": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// \u5b9a\u4e49\u8282\u70b9\u7ed3\u6784\u4f53\nstruct Node {\n    int value;\n    int left;\n    int right;\n};\n\n// \u5224\u65ad\u4e24\u68f5\u5b50\u6811\u662f\u5426\u5bf9\u79f0\nbool isSymmetric(const vector<Node>& tree, int node1, int node2) {\n    // \u4e24\u4e2a\u8282\u70b9\u90fd\u4e3a\u7a7a\uff0c\u5bf9\u79f0\n    if (node1 == -1 && node2 == -1) {\n        return true;\n    }\n    // \u4e00\u4e2a\u8282\u70b9\u4e3a\u7a7a\uff0c\u53e6\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\uff0c\u4e0d\u5bf9\u79f0\n    if (node1 == -1 || node2 == -1) {\n        return false;\n    }\n    // \u8282\u70b9\u6743\u503c\u4e0d\u76f8\u7b49\uff0c\u4e0d\u5bf9\u79f0\n    if (tree[node1].value != tree[node2].value) {\n        return false;\n    }\n    // \u9012\u5f52\u5224\u65ad\u5de6\u53f3\u5b50\u6811\u662f\u5426\u5bf9\u79f0\n    return isSymmetric(tree, tree[node1].left, tree[node2].right) && isSymmetric(tree, tree[node1].right, tree[node2].left);\n}\n\n// \u8ba1\u7b97\u5b50\u6811\u7684\u8282\u70b9\u6570\nint countNodes(const vector<Node>& tree, int node) {\n    if (node == -1) {\n        return 0;\n    }\n    return 1 + countNodes(tree, tree[node].left) + countNodes(tree, tree[node].right);\n}\n\n// \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5bfb\u627e\u6700\u5927\u7684\u5bf9\u79f0\u5b50\u6811\nvoid dfs(const vector<Node>& tree, int node, int& maxCount) {\n    if (node == -1) {\n        return;\n    }\n    if (isSymmetric(tree, node, node)) {\n        int count = countNodes(tree, node);\n        maxCount = max(maxCount, count);\n    }\n    dfs(tree, tree[node].left, maxCount);\n    dfs(tree, tree[node].right, maxCount);\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<Node> tree(n + 1);\n    for (int i = 1; i <= n; ++i) {\n        cin >> tree[i].value;\n    }\n\n    for (int i = 1; i <= n; ++i) {\n        cin >> tree[i].left >> tree[i].right;\n    }\n\n    int maxCount = 0;\n    dfs(tree, 1, maxCount);\n\n    cout << maxCount << endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 9,
        "code_file": null
    },
    {
        "question_id": 10,
        "code_file": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAXN = 100;\nconst int INF = 1e9;\n\nvector<int> solve(int N, int M, vector<pair<int, int>>& cows) {\n    vector<int> grass(N, 0); // 0\u8868\u793a\u672a\u79cd\u690d\uff0c1-4\u8868\u793a\u8349\u7684\u79cd\u7c7b\n    vector<vector<int>> conflict(N, vector<int>(N, 0)); // \u8868\u793a\u8349\u5730i\u548c\u8349\u5730j\u662f\u5426\u6709\u51b2\u7a81\n\n    // \u521d\u59cb\u5316\u51b2\u7a81\u77e9\u9635\n    for (auto& cow : cows) {\n        conflict[cow.first - 1][cow.second - 1] = 1;\n        conflict[cow.second - 1][cow.first - 1] = 1;\n    }\n\n    // \u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u89e3\u51b3\n    for (int i = 0; i < N; ++i) {\n        int used[5] = {0}; // \u8bb0\u5f55\u6bcf\u79cd\u8349\u7684\u4f7f\u7528\u60c5\u51b5\n        for (int j = 0; j < N; ++j) {\n            if (conflict[i][j] && grass[j] != 0) {\n                used[grass[j]] = 1;\n            }\n        }\n        for (int k = 1; k <= 4; ++k) {\n            if (!used[k]) {\n                grass[i] = k;\n                break;\n            }\n        }\n    }\n\n    return grass;\n}\n\nint main() {\n    int N, M;\n    cin >> N >> M;\n    vector<pair<int, int>> cows(M);\n    for (int i = 0; i < M; ++i) {\n        cin >> cows[i].first >> cows[i].second;\n    }\n\n    vector<int> result = solve(N, M, cows);\n\n    for (int i = 0; i < N; ++i) {\n        cout << result[i];\n    }\n    cout << endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 11,
        "code_file": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\n// \u5b9a\u4e49\u9009\u624b\u7ed3\u6784\u4f53\nstruct Player {\n    int id;\n    int score;\n    int power;\n};\n\n// \u6bd4\u8f83\u51fd\u6570\uff0c\u7528\u4e8e\u6392\u5e8f\nbool comparePlayers(const Player &a, const Player &b) {\n    if (a.score == b.score) {\n        return a.id < b.id;\n    }\n    return a.score > b.score;\n}\n\nint main() {\n    int N, R, Q;\n    cin >> N >> R >> Q;\n\n    vector<Player> players(2 * N);\n\n    // \u8bfb\u53d6\u521d\u59cb\u5206\u6570\n    for (int i = 0; i < 2 * N; ++i) {\n        cin >> players[i].score;\n        players[i].id = i + 1;\n    }\n\n    // \u8bfb\u53d6\u5b9e\u529b\u503c\n    for (int i = 0; i < 2 * N; ++i) {\n        cin >> players[i].power;\n    }\n\n    // \u6309\u521d\u59cb\u5206\u6570\u6392\u5e8f\n    sort(players.begin(), players.end(), comparePlayers);\n\n    // \u8fdb\u884cR\u8f6e\u6bd4\u8d5b\n    for (int round = 0; round < R; ++round) {\n        vector<Player> winners, losers;\n\n        // \u6bcf\u4e24\u8f6e\u6bd4\u8d5b\u4e00\u573a\n        for (int i = 0; i < 2 * N; i += 2) {\n            if (players[i].power > players[i + 1].power) {\n                players[i].score++;\n                winners.push_back(players[i]);\n                losers.push_back(players[i + 1]);\n            } else {\n                players[i + 1].score++;\n                winners.push_back(players[i + 1]);\n                losers.push_back(players[i]);\n            }\n        }\n\n        // \u5408\u5e76\u80dc\u8005\u4e0e\u8d25\u8005\n        players = winners;\n        players.insert(players.end(), losers.begin(), losers.end());\n\n        // \u6309\u5206\u6570\u548c\u7f16\u53f7\u91cd\u65b0\u6392\u5e8f\n        sort(players.begin(), players.end(), comparePlayers);\n    }\n\n    // \u8f93\u51fa\u7b2cQ\u540d\u9009\u624b\u7684\u7f16\u53f7\n    cout << players[Q - 1].id << endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 12,
        "code_file": "\n#include <iostream>\n#include <vector>\n\nint main() {\n    int k;\n    std::cin >> k;\n\n    int total_coins = 0;\n    int day = 1;\n    int coins_per_day = 1;\n\n    while (k > 0) {\n        if (k >= day) {\n            total_coins += day * coins_per_day;\n            k -= day;\n        } else {\n            total_coins += k * coins_per_day;\n            k = 0;\n        }\n        coins_per_day++;\n        day++;\n    }\n\n    std::cout << total_coins << std::endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 13,
        "code_file": null
    },
    {
        "question_id": 14,
        "code_file": "\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int n; // \u9700\u8981\u7684\u94c5\u7b14\u6570\u91cf\n    cin >> n;\n\n    int num[3], price[3]; // \u4e09\u79cd\u5305\u88c5\u7684\u94c5\u7b14\u6570\u91cf\u548c\u4ef7\u683c\n    for (int i = 0; i < 3; ++i) {\n        cin >> num[i] >> price[i];\n    }\n\n    int min_cost = INT_MAX; // \u521d\u59cb\u5316\u6700\u5c0f\u82b1\u8d39\u4e3a\u6700\u5927\u6574\u6570\n\n    // \u904d\u5386\u4e09\u79cd\u5305\u88c5\uff0c\u8ba1\u7b97\u6bcf\u79cd\u5305\u88c5\u6240\u9700\u7684\u6700\u5c0f\u82b1\u8d39\n    for (int i = 0; i < 3; ++i) {\n        // \u8ba1\u7b97\u9700\u8981\u8d2d\u4e70\u7684\u5305\u88c5\u6570\u91cf\n        int packages = (n + num[i] - 1) / num[i]; // \u5411\u4e0a\u53d6\u6574\n        // \u8ba1\u7b97\u603b\u82b1\u8d39\n        int cost = packages * price[i];\n        // \u66f4\u65b0\u6700\u5c0f\u82b1\u8d39\n        min_cost = min(min_cost, cost);\n    }\n\n    // \u8f93\u51fa\u6700\u5c0f\u82b1\u8d39\n    cout << min_cost << endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 15,
        "code_file": "\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int moves = 0;\n    // \u6bcf\u6b21\u79fb\u52a8\u7684\u6b21\u6570\u53ef\u4ee5\u8868\u793a\u4e3a 2^(n+1) - 2\n    moves = (1 << (n + 1)) - 2; // \u4f7f\u7528\u4f4d\u8fd0\u7b97\u5feb\u901f\u8ba1\u7b97 2^(n+1)\n    cout << moves << endl;\n    return 0;\n}\n"
    },
    {
        "question_id": 16,
        "code_file": null
    },
    {
        "question_id": 17,
        "code_file": "\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\n// \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff0c\u6c42\u89e3 ax + by = gcd(a, b)\nlong long exgcd(long long a, long long b, long long &x, long long &y) {\n    if (b == 0) {\n        x = 1;\n        y = 0;\n        return a;\n    }\n    long long d = exgcd(b, a % b, x, y);\n    long long temp = x;\n    x = y;\n    y = temp - (a / b) * y;\n    return d;\n}\n\nint main() {\n    long long a, b;\n    cin >> a >> b;\n\n    long long x, y;\n    long long gcd = exgcd(a, b, x, y);\n\n    // \u5c06 x \u8c03\u6574\u4e3a\u6700\u5c0f\u6b63\u6574\u6570\u89e3\n    x = (x % b + b) % b;\n\n    cout << x << endl;\n\n    return 0;\n}\n"
    },
    {
        "question_id": 18,
        "code_file": "\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// \u5b9a\u4e49\u96f7\u533a\u7684\u6700\u5927\u5c3a\u5bf8\nconst int MAX_N = 100;\nconst int MAX_M = 100;\n\n// \u5b9a\u4e49\u65b9\u5411\u6570\u7ec4\uff0c\u7528\u4e8e\u8868\u793a\u516b\u4e2a\u65b9\u5411\u7684\u5750\u6807\u53d8\u5316\nconst int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};\nconst int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    // \u521d\u59cb\u5316\u96f7\u533a\n    vector<vector<char>> minefield(n, vector<char>(m));\n    // \u521d\u59cb\u5316\u7b54\u6848\u77e9\u9635\n    vector<vector<int>> answer(n, vector<int>(m));\n\n    // \u8bfb\u53d6\u8f93\u5165\u7684\u96f7\u533a\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            cin >> minefield[i][j];\n        }\n    }\n\n    // \u8ba1\u7b97\u6bcf\u4e2a\u975e\u5730\u96f7\u683c\u5468\u56f4\u7684\u5730\u96f7\u6570\u91cf\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (minefield[i][j] == '*') {\n                answer[i][j] = '*';\n                continue;\n            }\n            int count = 0;\n            for (int k = 0; k < 8; ++k) {\n                int ni = i + dx[k];\n                int nj = j + dy[k];\n                if (ni >= 0 && ni < n && nj >= 0 && nj < m && minefield[ni][nj] == '*') {\n                    count++;\n                }\n            }\n            answer[i][j] = count;\n        }\n    }\n\n    // \u8f93\u51fa\u7ed3\u679c\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (answer[i][j] == '*') {\n                cout << '*';\n            } else {\n                cout << answer[i][j];\n            }\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n"
    },
    {
        "question_id": 19,
        "code_file": "\n#include <iostream>\n#include <string>\n\nint main() {\n    std::string isbn;\n    std::cin >> isbn;\n\n    int sum = 0;\n    for (int i = 0; i < 9; ++i) {\n        sum += (isbn[i] - '0') * (i + 1);\n    }\n\n    char check_digit = sum % 11 == 10 ? 'X' : sum % 11 + '0';\n\n    if (check_digit == isbn[12]) {\n        std::cout << \"Right\" << std::endl;\n    } else {\n        isbn[12] = check_digit;\n        std::cout << isbn << std::endl;\n    }\n\n    return 0;\n}\n"
    },
    {
        "question_id": 20,
        "code_file": null
    }
]